#NOTA INPORTANTE TODOS LOS METODOS, VARIABLES Y ECT.... TIENES QUE HACERLAS EN ESPAÑOL
# Mobile

## Video del Parcial Figma

[Video del Parcial Figma](https://drive.google.com/file/d/1Xo2RYxMpgA0rwTFOCDNp8ZqURG74fLpc/view?usp=sharing)

## Figma

[Enlace a Figma](https://www.figma.com/proto/FjPHQ8ar8omCvG2VyLKwxM/Tinder-APP?node-id=1-5&t=Q8w9gvY2vKxnBlWX-0&scaling=scale-down&content-scaling=fixed&page-id=0%3A1&starting-point-node-id=1%3A5)

![Pantalla de Bienvenida](pasted_file_q3CfEU_image.png)

## Overview

El presente documento describe las especificaciones técnicas y funcionales de la aplicación móvil **Tinder APP**, desarrollada como una versión simplificada del popular sistema de emparejamiento.  
El objetivo principal es ofrecer una aplicación funcional que permita el registro, inicio de sesión, visualización de perfiles, emparejamiento básico y mensajería entre usuarios.

Esta documentación está orientada a desarrolladores y colaboradores del proyecto, proporcionando una guía clara de los componentes técnicos y sus responsabilidades dentro del sistema.

---

## Application Specifications

La aplicación **Tinder APP** ha sido concebida bajo una arquitectura híbrida, utilizando **Ionic** para la interfaz de usuario y **Java** para la lógica de negocio y los módulos de interacción.  
El enfoque del desarrollo busca lograr una aplicación ligera, responsiva y fácil de mantener.

### Core Functionalities

* **Login (Ionic):** Permite al usuario acceder a su cuenta mediante correo electrónico y contraseña. Incluye validación básica de campos y autenticación contra el servidor.
* **Registro (Ionic):** Módulo de creación de cuentas que recoge datos esenciales (nombre, edad, correo, contraseña y foto de perfil). Implementa validaciones de formato y duplicidad de usuarios.
* **Pantalla de Inicio (Ionic):** Muestra una vista general con opciones de navegación hacia las funciones principales (emparejamiento, chat y perfil).
* **Ventanas de Emparejamiento (Java):** Gestiona la lógica de búsqueda y visualización de posibles coincidencias. Permite aceptar o rechazar perfiles.
* **Chat (Java):** Permite la comunicación básica entre usuarios emparejados. Incluye envío de mensajes en tiempo real y notificaciones locales.
* **Actualización de Perfil (Ionic):** Permite al usuario modificar su información personal, incluyendo imagen de perfil y descripción.

---

## Requisitos Obligatorios (MUST)

* **Módulos Core:** Componentes principales de la aplicación, necesarios para su funcionamiento base.
* **Módulos Compartidos:** Conjunto de funciones reutilizables para validación, comunicación con el servidor y manejo de datos locales.
* **Plugins:**
  * Plugin de selección de archivos (para fotos de perfil).
  * Plugin de vista de emparejamiento (conexión entre módulos Ionic y Java).  
  * Plugin de mensajería (sincronización básica entre usuarios).

---

## Optional Requirements (SHOULD)

* Integración con cámara para actualizar la foto de perfil.
* Sistema de notificaciones push (para nuevos matches o mensajes).
* Diseño responsivo optimizado para pantallas pequeñas.
* Modo oscuro (Dark Mode).

---

## Technical Stack

* **Frontend:** Ionic Framework (HTML, CSS, TypeScript)
* **Backend:** Java (lógica de emparejamiento y mensajería)
* **Base de Datos:** Firebase Realtime Database (almacenamiento de usuarios, matches y mensajes)  
* **Autenticación:** Firebase Authentication
* **IDE recomendados:** Android Studio, Visual Studio Code

---


---

## Project Structure (Frontend - Ionic / Angular)

A continuación se define una estructura de carpetas recomendada para el frontend (Ionic + Angular). La organización está pensada para favorecer la modularidad, la reutilización y la separación de responsabilidades, facilitando el mantenimiento y escalabilidad de la **Tinder APP** sencilla.

```
/src
  /app
    /core                # Módulo de núcleo: singletons y configuración global
      core.module.ts
      core.routes.ts
      /guards
        auth.guard.ts
      /interceptors
        auth.interceptor.ts
        error.interceptor.ts
      /services
        api.service.ts
        auth.service.ts
      /providers
        storage.provider.ts
        notification.provider.ts
    /shared              # Módulo compartido: componentes, pipes, directivas reusables
      shared.module.ts
      /components
        /user-card
          user-card.component.ts
          user-card.component.html
      /pipes
      /directives
      /interfaces        # Modelos e interfaces TypeScript
        user.interface.ts
        message.interface.ts
    /pages               # Páginas (lazy-loaded): vistas principales de la app
      /login
        login.module.ts
        login.page.ts
      /register
      /home
      /matches
      /profile
      /chat
    /plugins             # Wrappers de plugins/capacitor o código nativo
      camera.plugin.ts
      file-picker.plugin.ts
      match-view.plugin.ts
    /assets
    app.module.ts
    app-routing.module.ts
```

### Roles y recomendaciones por carpeta

- **core/**
  - Contiene servicios singleton y configuración que deben instanciarse una sola vez en la app (p. ej. `AuthService`, `ApiService`).  
  - **Guards** y **Interceptors** se registran desde este módulo para garantizar comportamiento global (autenticación y manejo de errores).  
  - El `CoreModule` debe protegerse para que solo se importe una vez (patrón `forRoot()` o comprobación en el constructor).

- **shared/**
  - Exporta componentes, pipes y directivas reutilizables entre páginas.  
  - No debe contener servicios con estado singleton; esos van en `core/`.

- **pages/**
  - Cada subcarpeta se implementa como módulo lazy-loaded para optimizar tiempos de carga.  
  - Las páginas contienen su propio módulo, routing y componentes específicos de UI.

- **plugins/**
  - Wrappers o adaptadores para plugins nativos (Capacitor/Cordova). Encapsulan el acceso a cámaras, almacenamiento y otras APIs y exponen una interfaz TypeScript consistente.

- **interfaces/** (puede ir en `shared/` o en una carpeta `models/` separada)
  - Tipos y contratos TypeScript (por ejemplo `User`, `Message`, `Match`) que definen la estructura de datos entre frontend y backend.

- **services/** y **providers/**
  - `services/` agrupa la lógica de negocio y consumo de APIs (p. ej. `MatchService`, `ChatService`).  
  - `providers/` se usan para adaptadores o factories de dependencias externas (p. ej. Storage, Notification) y suelen registrarse en `CoreModule`.

### Uso de Guards, Interceptors, Interfaces, Providers y Services

- **Guards**: se usan para proteger rutas (ej. `AuthGuard` protege páginas que requieren sesión). Se aplican en el `app-routing.module.ts` o en rutas específicas:
```ts
{ path: 'matches', loadChildren: () => import('./pages/matches/matches.module').then(m => m.MatchesModule), canActivate: [AuthGuard] }
```

- **Interceptors**: interceptan solicitudes HTTP para añadir cabeceras (token), manejar refresh token o capturar errores globales. Ejemplo de registro en `CoreModule`:
```ts
import { HTTP_INTERCEPTORS } from '@angular/common/http';

@NgModule({
  providers: [
    { provide: HTTP_INTERCEPTORS, useClass: AuthInterceptor, multi: true },
    { provide: HTTP_INTERCEPTORS, useClass: ErrorInterceptor, multi: true },
  ]
})
export class CoreModule {}
```

- **Interfaces**: definir contratos reduce errores y mejora el autocomplete en IDE. Ejemplo `user.interface.ts`:
```ts
export interface User {
  id: string;
  name: string;
  age: number;
  email: string;
  bio?: string;
  photoUrl?: string;
}
```

- **Providers**: capa de abstracción sobre servicios de plataforma (Storage, Push, Camera). Un provider puede encapsular la lógica para usar `Ionic Storage` o `Capacitor` y exponer métodos consistentes al resto de la app.

- **Services**: responsables del acceso a datos, reglas de negocio y comunicación con el backend (AuthService, UserService, MatchService, ChatService). Los servicios que mantienen estado global deben estar en `core/` y declararse como `providedIn: 'root'` o registrarse en `CoreModule`.

### Ejemplo de AuthInterceptor (esqueleto)
```ts
@Injectable()
export class AuthInterceptor implements HttpInterceptor {
  constructor(private authService: AuthService) {}

  intercept(req: HttpRequest<any>, next: HttpHandler) {
    const token = this.authService.getToken();
    if (token) {
      const cloned = req.clone({ setHeaders: { Authorization: `Bearer ${token}` } });
      return next.handle(cloned);
    }
    return next.handle(req);
  }
}
```

### Buenas prácticas adicionales
- Implementar lazy-loading en páginas para reducir el tamaño inicial de la app.
- Mantener `CoreModule` libre de componentes; solo providers y configuración.
- Centralizar URLs y constantes en `environment` y `ApiService`.
- Documentar interfaces y contratos de API (ej. con OpenAPI o un README/Swagger minimal).

---

## Deployment and Testing

La aplicación se desarrollará y probará en entorno Android, utilizando **emuladores de Android Studio** y dispositivos físicos.  
Se realizarán pruebas unitarias de los módulos principales (login, registro y emparejamiento) antes del despliegue final.

---

## Conclusion

El proyecto **Tinder APP** busca implementar una versión funcional y minimalista del sistema de emparejamiento, priorizando la claridad del código, la modularidad y la facilidad de mantenimiento.  
Esta especificación sirve como guía para el desarrollo, asegurando que cada componente cumpla su propósito dentro del ciclo de vida de la aplicación.



#NOTA INPORTANTE TODOS LOS METODOS, VARIABLES Y ECT.... TIENES QUE HACERLAS EN ESPAÑOL